version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: astro-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-astro_db}
      POSTGRES_USER: ${POSTGRES_USER:-astro_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-astro_user} -d ${POSTGRES_DB:-astro_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - astro-network-prod
    restart: always

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: astro-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data_prod:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - astro-network-prod
    restart: always

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: astro-backend-prod
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-astro_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-astro_db}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/0
      RATE_LIMIT_REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/1
      RATE_LIMIT_ENABLED: "true"
      
      # Application
      APP_NAME: "Astro MVP Backend"
      APP_VERSION: "1.0.0"
      DEBUG: "false"
      LOG_LEVEL: "INFO"
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: "HS256"
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: "30"
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      
      # CORS
      CORS_ORIGINS: '["https://astro.ashuj.com"]'
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: "gpt-5"
      
      # Ephemeris
      EPHEMERIS_DATA_PATH: "./ephemeris"
      EPHEMERIS_PATH: "./ephemeris"
      RULESET_VERSION: "1.0.0"
      EPHEMERIS_VERSION: "sepl_18"
      AYANAMSA_DEFAULT: "Lahiri"
      HOUSE_SYSTEM_DEFAULT: "WholeSign"
      
      # LLM Settings
      LLM_MODEL: "gpt-5"
      LLM_TEMPERATURE: "0.7"
      LLM_MAX_TOKENS: "3000"
      LLM_SEED: "7"
      LLM_TIMEOUT_MS: "60000"
      
      # Cache
      CACHE_TTL_HOURS: "24"
      
      # Validation
      MIN_BIRTH_YEAR: "1900"
      MAX_BIRTH_YEAR: "2100"
      MAX_UNCERTAINTY_MINUTES: "10"
      
      # Calculation
      MAX_CALCULATION_TIMEOUT: "30"
    volumes:
      - ./backend/ephemeris:/app/ephemeris:ro
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - astro-network-prod
    restart: always

  # Database Migration Service (runs once)
  migrate:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: astro-migrate-prod
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-astro_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-astro_db}
    volumes:
      - ./backend:/app
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 10 &&
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Migrations completed!'
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - astro-network-prod
    restart: "no"

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: "https://astro.ashuj.com/api"
    container_name: astro-frontend-prod
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - astro-network-prod
    restart: always

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  backend_logs:
    driver: local

networks:
  astro-network-prod:
    driver: bridge

